// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/interngowhere/web-backend/ent/comment"
	"github.com/interngowhere/web-backend/ent/thread"
	"github.com/interngowhere/web-backend/ent/user"
)

// Comment is the model entity for the Comment schema.
type Comment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID int `json:"parent_id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// ModifiedAt holds the value of the "modified_at" field.
	ModifiedAt time.Time `json:"modified_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommentQuery when eager-loading is set.
	Edges                  CommentEdges `json:"edges"`
	thread_thread_comments *int
	selectValues           sql.SelectValues
}

// CommentEdges holds the relations/edges for other nodes in the graph.
type CommentEdges struct {
	// Threads holds the value of the threads edge.
	Threads *Thread `json:"threads,omitempty"`
	// CommentAuthors holds the value of the comment_authors edge.
	CommentAuthors *User `json:"comment_authors,omitempty"`
	// KudoedUsers holds the value of the kudoed_users edge.
	KudoedUsers []*User `json:"kudoed_users,omitempty"`
	// CommentKudoes holds the value of the comment_kudoes edge.
	CommentKudoes []*CommentKudo `json:"comment_kudoes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ThreadsOrErr returns the Threads value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) ThreadsOrErr() (*Thread, error) {
	if e.loadedTypes[0] {
		if e.Threads == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: thread.Label}
		}
		return e.Threads, nil
	}
	return nil, &NotLoadedError{edge: "threads"}
}

// CommentAuthorsOrErr returns the CommentAuthors value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) CommentAuthorsOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.CommentAuthors == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.CommentAuthors, nil
	}
	return nil, &NotLoadedError{edge: "comment_authors"}
}

// KudoedUsersOrErr returns the KudoedUsers value or an error if the edge
// was not loaded in eager-loading.
func (e CommentEdges) KudoedUsersOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.KudoedUsers, nil
	}
	return nil, &NotLoadedError{edge: "kudoed_users"}
}

// CommentKudoesOrErr returns the CommentKudoes value or an error if the edge
// was not loaded in eager-loading.
func (e CommentEdges) CommentKudoesOrErr() ([]*CommentKudo, error) {
	if e.loadedTypes[3] {
		return e.CommentKudoes, nil
	}
	return nil, &NotLoadedError{edge: "comment_kudoes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Comment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case comment.FieldID, comment.FieldParentID:
			values[i] = new(sql.NullInt64)
		case comment.FieldContent:
			values[i] = new(sql.NullString)
		case comment.FieldModifiedAt, comment.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case comment.FieldCreatedBy:
			values[i] = new(uuid.UUID)
		case comment.ForeignKeys[0]: // thread_thread_comments
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Comment fields.
func (c *Comment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case comment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case comment.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				c.ParentID = int(value.Int64)
			}
		case comment.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				c.Content = value.String
			}
		case comment.FieldModifiedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modified_at", values[i])
			} else if value.Valid {
				c.ModifiedAt = value.Time
			}
		case comment.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				c.CreatedBy = *value
			}
		case comment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case comment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field thread_thread_comments", value)
			} else if value.Valid {
				c.thread_thread_comments = new(int)
				*c.thread_thread_comments = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Comment.
// This includes values selected through modifiers, order, etc.
func (c *Comment) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryThreads queries the "threads" edge of the Comment entity.
func (c *Comment) QueryThreads() *ThreadQuery {
	return NewCommentClient(c.config).QueryThreads(c)
}

// QueryCommentAuthors queries the "comment_authors" edge of the Comment entity.
func (c *Comment) QueryCommentAuthors() *UserQuery {
	return NewCommentClient(c.config).QueryCommentAuthors(c)
}

// QueryKudoedUsers queries the "kudoed_users" edge of the Comment entity.
func (c *Comment) QueryKudoedUsers() *UserQuery {
	return NewCommentClient(c.config).QueryKudoedUsers(c)
}

// QueryCommentKudoes queries the "comment_kudoes" edge of the Comment entity.
func (c *Comment) QueryCommentKudoes() *CommentKudoQuery {
	return NewCommentClient(c.config).QueryCommentKudoes(c)
}

// Update returns a builder for updating this Comment.
// Note that you need to call Comment.Unwrap() before calling this method if this Comment
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Comment) Update() *CommentUpdateOne {
	return NewCommentClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Comment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Comment) Unwrap() *Comment {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Comment is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Comment) String() string {
	var builder strings.Builder
	builder.WriteString("Comment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", c.ParentID))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(c.Content)
	builder.WriteString(", ")
	builder.WriteString("modified_at=")
	builder.WriteString(c.ModifiedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", c.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Comments is a parsable slice of Comment.
type Comments []*Comment
