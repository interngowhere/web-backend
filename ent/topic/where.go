// Code generated by ent, DO NOT EDIT.

package topic

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/interngowhere/web-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldTitle, v))
}

// ShortDescription applies equality check predicate on the "short_description" field. It's identical to ShortDescriptionEQ.
func ShortDescription(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldShortDescription, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldDescription, v))
}

// ProfilePicURL applies equality check predicate on the "profile_pic_url" field. It's identical to ProfilePicURLEQ.
func ProfilePicURL(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldProfilePicURL, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldCreatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldTitle, v))
}

// ShortDescriptionEQ applies the EQ predicate on the "short_description" field.
func ShortDescriptionEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldShortDescription, v))
}

// ShortDescriptionNEQ applies the NEQ predicate on the "short_description" field.
func ShortDescriptionNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldShortDescription, v))
}

// ShortDescriptionIn applies the In predicate on the "short_description" field.
func ShortDescriptionIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldShortDescription, vs...))
}

// ShortDescriptionNotIn applies the NotIn predicate on the "short_description" field.
func ShortDescriptionNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldShortDescription, vs...))
}

// ShortDescriptionGT applies the GT predicate on the "short_description" field.
func ShortDescriptionGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldShortDescription, v))
}

// ShortDescriptionGTE applies the GTE predicate on the "short_description" field.
func ShortDescriptionGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldShortDescription, v))
}

// ShortDescriptionLT applies the LT predicate on the "short_description" field.
func ShortDescriptionLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldShortDescription, v))
}

// ShortDescriptionLTE applies the LTE predicate on the "short_description" field.
func ShortDescriptionLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldShortDescription, v))
}

// ShortDescriptionContains applies the Contains predicate on the "short_description" field.
func ShortDescriptionContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldShortDescription, v))
}

// ShortDescriptionHasPrefix applies the HasPrefix predicate on the "short_description" field.
func ShortDescriptionHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldShortDescription, v))
}

// ShortDescriptionHasSuffix applies the HasSuffix predicate on the "short_description" field.
func ShortDescriptionHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldShortDescription, v))
}

// ShortDescriptionEqualFold applies the EqualFold predicate on the "short_description" field.
func ShortDescriptionEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldShortDescription, v))
}

// ShortDescriptionContainsFold applies the ContainsFold predicate on the "short_description" field.
func ShortDescriptionContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldShortDescription, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldDescription, v))
}

// ProfilePicURLEQ applies the EQ predicate on the "profile_pic_url" field.
func ProfilePicURLEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldProfilePicURL, v))
}

// ProfilePicURLNEQ applies the NEQ predicate on the "profile_pic_url" field.
func ProfilePicURLNEQ(v string) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldProfilePicURL, v))
}

// ProfilePicURLIn applies the In predicate on the "profile_pic_url" field.
func ProfilePicURLIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldProfilePicURL, vs...))
}

// ProfilePicURLNotIn applies the NotIn predicate on the "profile_pic_url" field.
func ProfilePicURLNotIn(vs ...string) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldProfilePicURL, vs...))
}

// ProfilePicURLGT applies the GT predicate on the "profile_pic_url" field.
func ProfilePicURLGT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldProfilePicURL, v))
}

// ProfilePicURLGTE applies the GTE predicate on the "profile_pic_url" field.
func ProfilePicURLGTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldProfilePicURL, v))
}

// ProfilePicURLLT applies the LT predicate on the "profile_pic_url" field.
func ProfilePicURLLT(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldProfilePicURL, v))
}

// ProfilePicURLLTE applies the LTE predicate on the "profile_pic_url" field.
func ProfilePicURLLTE(v string) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldProfilePicURL, v))
}

// ProfilePicURLContains applies the Contains predicate on the "profile_pic_url" field.
func ProfilePicURLContains(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContains(FieldProfilePicURL, v))
}

// ProfilePicURLHasPrefix applies the HasPrefix predicate on the "profile_pic_url" field.
func ProfilePicURLHasPrefix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasPrefix(FieldProfilePicURL, v))
}

// ProfilePicURLHasSuffix applies the HasSuffix predicate on the "profile_pic_url" field.
func ProfilePicURLHasSuffix(v string) predicate.Topic {
	return predicate.Topic(sql.FieldHasSuffix(FieldProfilePicURL, v))
}

// ProfilePicURLIsNil applies the IsNil predicate on the "profile_pic_url" field.
func ProfilePicURLIsNil() predicate.Topic {
	return predicate.Topic(sql.FieldIsNull(FieldProfilePicURL))
}

// ProfilePicURLNotNil applies the NotNil predicate on the "profile_pic_url" field.
func ProfilePicURLNotNil() predicate.Topic {
	return predicate.Topic(sql.FieldNotNull(FieldProfilePicURL))
}

// ProfilePicURLEqualFold applies the EqualFold predicate on the "profile_pic_url" field.
func ProfilePicURLEqualFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldEqualFold(FieldProfilePicURL, v))
}

// ProfilePicURLContainsFold applies the ContainsFold predicate on the "profile_pic_url" field.
func ProfilePicURLContainsFold(v string) predicate.Topic {
	return predicate.Topic(sql.FieldContainsFold(FieldProfilePicURL, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Topic {
	return predicate.Topic(sql.FieldLTE(FieldCreatedAt, v))
}

// HasTopicThreads applies the HasEdge predicate on the "topic_threads" edge.
func HasTopicThreads() predicate.Topic {
	return predicate.Topic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TopicThreadsTable, TopicThreadsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTopicThreadsWith applies the HasEdge predicate on the "topic_threads" edge with a given conditions (other predicates).
func HasTopicThreadsWith(preds ...predicate.Thread) predicate.Topic {
	return predicate.Topic(func(s *sql.Selector) {
		step := newTopicThreadsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTopicModerators applies the HasEdge predicate on the "topic_moderators" edge.
func HasTopicModerators() predicate.Topic {
	return predicate.Topic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TopicModeratorsTable, TopicModeratorsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTopicModeratorsWith applies the HasEdge predicate on the "topic_moderators" edge with a given conditions (other predicates).
func HasTopicModeratorsWith(preds ...predicate.User) predicate.Topic {
	return predicate.Topic(func(s *sql.Selector) {
		step := newTopicModeratorsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasModerators applies the HasEdge predicate on the "moderators" edge.
func HasModerators() predicate.Topic {
	return predicate.Topic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ModeratorsTable, ModeratorsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModeratorsWith applies the HasEdge predicate on the "moderators" edge with a given conditions (other predicates).
func HasModeratorsWith(preds ...predicate.Moderator) predicate.Topic {
	return predicate.Topic(func(s *sql.Selector) {
		step := newModeratorsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Topic) predicate.Topic {
	return predicate.Topic(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Topic) predicate.Topic {
	return predicate.Topic(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Topic) predicate.Topic {
	return predicate.Topic(sql.NotPredicates(p))
}
