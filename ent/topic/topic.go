// Code generated by ent, DO NOT EDIT.

package topic

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the topic type in the database.
	Label = "topic"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldShortTitle holds the string denoting the short_title field in the database.
	FieldShortTitle = "short_title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldProfilePicURL holds the string denoting the profile_pic_url field in the database.
	FieldProfilePicURL = "profile_pic_url"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeTopicThreads holds the string denoting the topic_threads edge name in mutations.
	EdgeTopicThreads = "topic_threads"
	// EdgeTopicModerators holds the string denoting the topic_moderators edge name in mutations.
	EdgeTopicModerators = "topic_moderators"
	// EdgeModerators holds the string denoting the moderators edge name in mutations.
	EdgeModerators = "moderators"
	// Table holds the table name of the topic in the database.
	Table = "topics"
	// TopicThreadsTable is the table that holds the topic_threads relation/edge.
	TopicThreadsTable = "threads"
	// TopicThreadsInverseTable is the table name for the Thread entity.
	// It exists in this package in order to avoid circular dependency with the "thread" package.
	TopicThreadsInverseTable = "threads"
	// TopicThreadsColumn is the table column denoting the topic_threads relation/edge.
	TopicThreadsColumn = "topic_topic_threads"
	// TopicModeratorsTable is the table that holds the topic_moderators relation/edge. The primary key declared below.
	TopicModeratorsTable = "moderators"
	// TopicModeratorsInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	TopicModeratorsInverseTable = "users"
	// ModeratorsTable is the table that holds the moderators relation/edge.
	ModeratorsTable = "moderators"
	// ModeratorsInverseTable is the table name for the Moderator entity.
	// It exists in this package in order to avoid circular dependency with the "moderator" package.
	ModeratorsInverseTable = "moderators"
	// ModeratorsColumn is the table column denoting the moderators relation/edge.
	ModeratorsColumn = "topic_id"
)

// Columns holds all SQL columns for topic fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldShortTitle,
	FieldDescription,
	FieldProfilePicURL,
	FieldCreatedAt,
}

var (
	// TopicModeratorsPrimaryKey and TopicModeratorsColumn2 are the table columns denoting the
	// primary key for the topic_moderators relation (M2M).
	TopicModeratorsPrimaryKey = []string{"moderator_id", "topic_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// ShortTitleValidator is a validator for the "short_title" field. It is called by the builders before save.
	ShortTitleValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the Topic queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByShortTitle orders the results by the short_title field.
func ByShortTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShortTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByProfilePicURL orders the results by the profile_pic_url field.
func ByProfilePicURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfilePicURL, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByTopicThreadsCount orders the results by topic_threads count.
func ByTopicThreadsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTopicThreadsStep(), opts...)
	}
}

// ByTopicThreads orders the results by topic_threads terms.
func ByTopicThreads(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTopicThreadsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTopicModeratorsCount orders the results by topic_moderators count.
func ByTopicModeratorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTopicModeratorsStep(), opts...)
	}
}

// ByTopicModerators orders the results by topic_moderators terms.
func ByTopicModerators(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTopicModeratorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByModeratorsCount orders the results by moderators count.
func ByModeratorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newModeratorsStep(), opts...)
	}
}

// ByModerators orders the results by moderators terms.
func ByModerators(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModeratorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTopicThreadsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TopicThreadsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TopicThreadsTable, TopicThreadsColumn),
	)
}
func newTopicModeratorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TopicModeratorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, TopicModeratorsTable, TopicModeratorsPrimaryKey...),
	)
}
func newModeratorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ModeratorsInverseTable, ModeratorsColumn),
		sqlgraph.Edge(sqlgraph.O2M, true, ModeratorsTable, ModeratorsColumn),
	)
}
