// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/interngowhere/web-backend/ent/predicate"
	"github.com/interngowhere/web-backend/ent/thread"
	"github.com/interngowhere/web-backend/ent/threadkudo"
	"github.com/interngowhere/web-backend/ent/user"
)

// ThreadKudoQuery is the builder for querying ThreadKudo entities.
type ThreadKudoQuery struct {
	config
	ctx        *QueryContext
	order      []threadkudo.OrderOption
	inters     []Interceptor
	predicates []predicate.ThreadKudo
	withUser   *UserQuery
	withThread *ThreadQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ThreadKudoQuery builder.
func (tkq *ThreadKudoQuery) Where(ps ...predicate.ThreadKudo) *ThreadKudoQuery {
	tkq.predicates = append(tkq.predicates, ps...)
	return tkq
}

// Limit the number of records to be returned by this query.
func (tkq *ThreadKudoQuery) Limit(limit int) *ThreadKudoQuery {
	tkq.ctx.Limit = &limit
	return tkq
}

// Offset to start from.
func (tkq *ThreadKudoQuery) Offset(offset int) *ThreadKudoQuery {
	tkq.ctx.Offset = &offset
	return tkq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tkq *ThreadKudoQuery) Unique(unique bool) *ThreadKudoQuery {
	tkq.ctx.Unique = &unique
	return tkq
}

// Order specifies how the records should be ordered.
func (tkq *ThreadKudoQuery) Order(o ...threadkudo.OrderOption) *ThreadKudoQuery {
	tkq.order = append(tkq.order, o...)
	return tkq
}

// QueryUser chains the current query on the "user" edge.
func (tkq *ThreadKudoQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: tkq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tkq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tkq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(threadkudo.Table, threadkudo.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, threadkudo.UserTable, threadkudo.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(tkq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryThread chains the current query on the "thread" edge.
func (tkq *ThreadKudoQuery) QueryThread() *ThreadQuery {
	query := (&ThreadClient{config: tkq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tkq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tkq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(threadkudo.Table, threadkudo.FieldID, selector),
			sqlgraph.To(thread.Table, thread.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, threadkudo.ThreadTable, threadkudo.ThreadColumn),
		)
		fromU = sqlgraph.SetNeighbors(tkq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ThreadKudo entity from the query.
// Returns a *NotFoundError when no ThreadKudo was found.
func (tkq *ThreadKudoQuery) First(ctx context.Context) (*ThreadKudo, error) {
	nodes, err := tkq.Limit(1).All(setContextOp(ctx, tkq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{threadkudo.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tkq *ThreadKudoQuery) FirstX(ctx context.Context) *ThreadKudo {
	node, err := tkq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ThreadKudo ID from the query.
// Returns a *NotFoundError when no ThreadKudo ID was found.
func (tkq *ThreadKudoQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tkq.Limit(1).IDs(setContextOp(ctx, tkq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{threadkudo.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tkq *ThreadKudoQuery) FirstIDX(ctx context.Context) int {
	id, err := tkq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ThreadKudo entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ThreadKudo entity is found.
// Returns a *NotFoundError when no ThreadKudo entities are found.
func (tkq *ThreadKudoQuery) Only(ctx context.Context) (*ThreadKudo, error) {
	nodes, err := tkq.Limit(2).All(setContextOp(ctx, tkq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{threadkudo.Label}
	default:
		return nil, &NotSingularError{threadkudo.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tkq *ThreadKudoQuery) OnlyX(ctx context.Context) *ThreadKudo {
	node, err := tkq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ThreadKudo ID in the query.
// Returns a *NotSingularError when more than one ThreadKudo ID is found.
// Returns a *NotFoundError when no entities are found.
func (tkq *ThreadKudoQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tkq.Limit(2).IDs(setContextOp(ctx, tkq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{threadkudo.Label}
	default:
		err = &NotSingularError{threadkudo.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tkq *ThreadKudoQuery) OnlyIDX(ctx context.Context) int {
	id, err := tkq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ThreadKudos.
func (tkq *ThreadKudoQuery) All(ctx context.Context) ([]*ThreadKudo, error) {
	ctx = setContextOp(ctx, tkq.ctx, "All")
	if err := tkq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ThreadKudo, *ThreadKudoQuery]()
	return withInterceptors[[]*ThreadKudo](ctx, tkq, qr, tkq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tkq *ThreadKudoQuery) AllX(ctx context.Context) []*ThreadKudo {
	nodes, err := tkq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ThreadKudo IDs.
func (tkq *ThreadKudoQuery) IDs(ctx context.Context) (ids []int, err error) {
	if tkq.ctx.Unique == nil && tkq.path != nil {
		tkq.Unique(true)
	}
	ctx = setContextOp(ctx, tkq.ctx, "IDs")
	if err = tkq.Select(threadkudo.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tkq *ThreadKudoQuery) IDsX(ctx context.Context) []int {
	ids, err := tkq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tkq *ThreadKudoQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tkq.ctx, "Count")
	if err := tkq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tkq, querierCount[*ThreadKudoQuery](), tkq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tkq *ThreadKudoQuery) CountX(ctx context.Context) int {
	count, err := tkq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tkq *ThreadKudoQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tkq.ctx, "Exist")
	switch _, err := tkq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tkq *ThreadKudoQuery) ExistX(ctx context.Context) bool {
	exist, err := tkq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ThreadKudoQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tkq *ThreadKudoQuery) Clone() *ThreadKudoQuery {
	if tkq == nil {
		return nil
	}
	return &ThreadKudoQuery{
		config:     tkq.config,
		ctx:        tkq.ctx.Clone(),
		order:      append([]threadkudo.OrderOption{}, tkq.order...),
		inters:     append([]Interceptor{}, tkq.inters...),
		predicates: append([]predicate.ThreadKudo{}, tkq.predicates...),
		withUser:   tkq.withUser.Clone(),
		withThread: tkq.withThread.Clone(),
		// clone intermediate query.
		sql:  tkq.sql.Clone(),
		path: tkq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (tkq *ThreadKudoQuery) WithUser(opts ...func(*UserQuery)) *ThreadKudoQuery {
	query := (&UserClient{config: tkq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tkq.withUser = query
	return tkq
}

// WithThread tells the query-builder to eager-load the nodes that are connected to
// the "thread" edge. The optional arguments are used to configure the query builder of the edge.
func (tkq *ThreadKudoQuery) WithThread(opts ...func(*ThreadQuery)) *ThreadKudoQuery {
	query := (&ThreadClient{config: tkq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tkq.withThread = query
	return tkq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID uuid.UUID `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ThreadKudo.Query().
//		GroupBy(threadkudo.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tkq *ThreadKudoQuery) GroupBy(field string, fields ...string) *ThreadKudoGroupBy {
	tkq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ThreadKudoGroupBy{build: tkq}
	grbuild.flds = &tkq.ctx.Fields
	grbuild.label = threadkudo.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID uuid.UUID `json:"user_id,omitempty"`
//	}
//
//	client.ThreadKudo.Query().
//		Select(threadkudo.FieldUserID).
//		Scan(ctx, &v)
func (tkq *ThreadKudoQuery) Select(fields ...string) *ThreadKudoSelect {
	tkq.ctx.Fields = append(tkq.ctx.Fields, fields...)
	sbuild := &ThreadKudoSelect{ThreadKudoQuery: tkq}
	sbuild.label = threadkudo.Label
	sbuild.flds, sbuild.scan = &tkq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ThreadKudoSelect configured with the given aggregations.
func (tkq *ThreadKudoQuery) Aggregate(fns ...AggregateFunc) *ThreadKudoSelect {
	return tkq.Select().Aggregate(fns...)
}

func (tkq *ThreadKudoQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tkq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tkq); err != nil {
				return err
			}
		}
	}
	for _, f := range tkq.ctx.Fields {
		if !threadkudo.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tkq.path != nil {
		prev, err := tkq.path(ctx)
		if err != nil {
			return err
		}
		tkq.sql = prev
	}
	return nil
}

func (tkq *ThreadKudoQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ThreadKudo, error) {
	var (
		nodes       = []*ThreadKudo{}
		_spec       = tkq.querySpec()
		loadedTypes = [2]bool{
			tkq.withUser != nil,
			tkq.withThread != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ThreadKudo).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ThreadKudo{config: tkq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tkq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tkq.withUser; query != nil {
		if err := tkq.loadUser(ctx, query, nodes, nil,
			func(n *ThreadKudo, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := tkq.withThread; query != nil {
		if err := tkq.loadThread(ctx, query, nodes, nil,
			func(n *ThreadKudo, e *Thread) { n.Edges.Thread = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tkq *ThreadKudoQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*ThreadKudo, init func(*ThreadKudo), assign func(*ThreadKudo, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*ThreadKudo)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tkq *ThreadKudoQuery) loadThread(ctx context.Context, query *ThreadQuery, nodes []*ThreadKudo, init func(*ThreadKudo), assign func(*ThreadKudo, *Thread)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ThreadKudo)
	for i := range nodes {
		fk := nodes[i].ThreadID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(thread.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "thread_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tkq *ThreadKudoQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tkq.querySpec()
	_spec.Node.Columns = tkq.ctx.Fields
	if len(tkq.ctx.Fields) > 0 {
		_spec.Unique = tkq.ctx.Unique != nil && *tkq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tkq.driver, _spec)
}

func (tkq *ThreadKudoQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(threadkudo.Table, threadkudo.Columns, sqlgraph.NewFieldSpec(threadkudo.FieldID, field.TypeInt))
	_spec.From = tkq.sql
	if unique := tkq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tkq.path != nil {
		_spec.Unique = true
	}
	if fields := tkq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, threadkudo.FieldID)
		for i := range fields {
			if fields[i] != threadkudo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if tkq.withUser != nil {
			_spec.Node.AddColumnOnce(threadkudo.FieldUserID)
		}
		if tkq.withThread != nil {
			_spec.Node.AddColumnOnce(threadkudo.FieldThreadID)
		}
	}
	if ps := tkq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tkq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tkq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tkq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tkq *ThreadKudoQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tkq.driver.Dialect())
	t1 := builder.Table(threadkudo.Table)
	columns := tkq.ctx.Fields
	if len(columns) == 0 {
		columns = threadkudo.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tkq.sql != nil {
		selector = tkq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tkq.ctx.Unique != nil && *tkq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tkq.predicates {
		p(selector)
	}
	for _, p := range tkq.order {
		p(selector)
	}
	if offset := tkq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tkq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ThreadKudoGroupBy is the group-by builder for ThreadKudo entities.
type ThreadKudoGroupBy struct {
	selector
	build *ThreadKudoQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tkgb *ThreadKudoGroupBy) Aggregate(fns ...AggregateFunc) *ThreadKudoGroupBy {
	tkgb.fns = append(tkgb.fns, fns...)
	return tkgb
}

// Scan applies the selector query and scans the result into the given value.
func (tkgb *ThreadKudoGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tkgb.build.ctx, "GroupBy")
	if err := tkgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ThreadKudoQuery, *ThreadKudoGroupBy](ctx, tkgb.build, tkgb, tkgb.build.inters, v)
}

func (tkgb *ThreadKudoGroupBy) sqlScan(ctx context.Context, root *ThreadKudoQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tkgb.fns))
	for _, fn := range tkgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tkgb.flds)+len(tkgb.fns))
		for _, f := range *tkgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tkgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tkgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ThreadKudoSelect is the builder for selecting fields of ThreadKudo entities.
type ThreadKudoSelect struct {
	*ThreadKudoQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tks *ThreadKudoSelect) Aggregate(fns ...AggregateFunc) *ThreadKudoSelect {
	tks.fns = append(tks.fns, fns...)
	return tks
}

// Scan applies the selector query and scans the result into the given value.
func (tks *ThreadKudoSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tks.ctx, "Select")
	if err := tks.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ThreadKudoQuery, *ThreadKudoSelect](ctx, tks.ThreadKudoQuery, tks, tks.inters, v)
}

func (tks *ThreadKudoSelect) sqlScan(ctx context.Context, root *ThreadKudoQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tks.fns))
	for _, fn := range tks.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tks.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tks.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
