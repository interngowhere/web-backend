// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/interngowhere/web-backend/ent/commentkudo"
	"github.com/interngowhere/web-backend/ent/predicate"
)

// CommentKudoUpdate is the builder for updating CommentKudo entities.
type CommentKudoUpdate struct {
	config
	hooks    []Hook
	mutation *CommentKudoMutation
}

// Where appends a list predicates to the CommentKudoUpdate builder.
func (cku *CommentKudoUpdate) Where(ps ...predicate.CommentKudo) *CommentKudoUpdate {
	cku.mutation.Where(ps...)
	return cku
}

// Mutation returns the CommentKudoMutation object of the builder.
func (cku *CommentKudoUpdate) Mutation() *CommentKudoMutation {
	return cku.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cku *CommentKudoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cku.sqlSave, cku.mutation, cku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cku *CommentKudoUpdate) SaveX(ctx context.Context) int {
	affected, err := cku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cku *CommentKudoUpdate) Exec(ctx context.Context) error {
	_, err := cku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cku *CommentKudoUpdate) ExecX(ctx context.Context) {
	if err := cku.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cku *CommentKudoUpdate) check() error {
	if _, ok := cku.mutation.UserID(); cku.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CommentKudo.user"`)
	}
	if _, ok := cku.mutation.CommentID(); cku.mutation.CommentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CommentKudo.comment"`)
	}
	return nil
}

func (cku *CommentKudoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cku.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(commentkudo.Table, commentkudo.Columns, sqlgraph.NewFieldSpec(commentkudo.FieldID, field.TypeInt))
	if ps := cku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commentkudo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cku.mutation.done = true
	return n, nil
}

// CommentKudoUpdateOne is the builder for updating a single CommentKudo entity.
type CommentKudoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentKudoMutation
}

// Mutation returns the CommentKudoMutation object of the builder.
func (ckuo *CommentKudoUpdateOne) Mutation() *CommentKudoMutation {
	return ckuo.mutation
}

// Where appends a list predicates to the CommentKudoUpdate builder.
func (ckuo *CommentKudoUpdateOne) Where(ps ...predicate.CommentKudo) *CommentKudoUpdateOne {
	ckuo.mutation.Where(ps...)
	return ckuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ckuo *CommentKudoUpdateOne) Select(field string, fields ...string) *CommentKudoUpdateOne {
	ckuo.fields = append([]string{field}, fields...)
	return ckuo
}

// Save executes the query and returns the updated CommentKudo entity.
func (ckuo *CommentKudoUpdateOne) Save(ctx context.Context) (*CommentKudo, error) {
	return withHooks(ctx, ckuo.sqlSave, ckuo.mutation, ckuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ckuo *CommentKudoUpdateOne) SaveX(ctx context.Context) *CommentKudo {
	node, err := ckuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ckuo *CommentKudoUpdateOne) Exec(ctx context.Context) error {
	_, err := ckuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ckuo *CommentKudoUpdateOne) ExecX(ctx context.Context) {
	if err := ckuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ckuo *CommentKudoUpdateOne) check() error {
	if _, ok := ckuo.mutation.UserID(); ckuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CommentKudo.user"`)
	}
	if _, ok := ckuo.mutation.CommentID(); ckuo.mutation.CommentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CommentKudo.comment"`)
	}
	return nil
}

func (ckuo *CommentKudoUpdateOne) sqlSave(ctx context.Context) (_node *CommentKudo, err error) {
	if err := ckuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(commentkudo.Table, commentkudo.Columns, sqlgraph.NewFieldSpec(commentkudo.FieldID, field.TypeInt))
	id, ok := ckuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CommentKudo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ckuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commentkudo.FieldID)
		for _, f := range fields {
			if !commentkudo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != commentkudo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ckuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &CommentKudo{config: ckuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ckuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commentkudo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ckuo.mutation.done = true
	return _node, nil
}
