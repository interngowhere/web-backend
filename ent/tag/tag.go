// Code generated by ent, DO NOT EDIT.

package tag

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tag type in the database.
	Label = "tag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTagName holds the string denoting the tag_name field in the database.
	FieldTagName = "tag_name"
	// EdgeTaggedThreads holds the string denoting the tagged_threads edge name in mutations.
	EdgeTaggedThreads = "tagged_threads"
	// Table holds the table name of the tag in the database.
	Table = "tags"
	// TaggedThreadsTable is the table that holds the tagged_threads relation/edge. The primary key declared below.
	TaggedThreadsTable = "thread_tags"
	// TaggedThreadsInverseTable is the table name for the Thread entity.
	// It exists in this package in order to avoid circular dependency with the "thread" package.
	TaggedThreadsInverseTable = "threads"
)

// Columns holds all SQL columns for tag fields.
var Columns = []string{
	FieldID,
	FieldTagName,
}

var (
	// TaggedThreadsPrimaryKey and TaggedThreadsColumn2 are the table columns denoting the
	// primary key for the tagged_threads relation (M2M).
	TaggedThreadsPrimaryKey = []string{"thread_id", "tag_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TagNameValidator is a validator for the "tag_name" field. It is called by the builders before save.
	TagNameValidator func(string) error
)

// OrderOption defines the ordering options for the Tag queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTagName orders the results by the tag_name field.
func ByTagName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTagName, opts...).ToFunc()
}

// ByTaggedThreadsCount orders the results by tagged_threads count.
func ByTaggedThreadsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTaggedThreadsStep(), opts...)
	}
}

// ByTaggedThreads orders the results by tagged_threads terms.
func ByTaggedThreads(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaggedThreadsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTaggedThreadsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaggedThreadsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, TaggedThreadsTable, TaggedThreadsPrimaryKey...),
	)
}
