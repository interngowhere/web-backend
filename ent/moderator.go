// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/interngowhere/web-backend/ent/moderator"
	"github.com/interngowhere/web-backend/ent/topic"
	"github.com/interngowhere/web-backend/ent/user"
)

// Moderator is the model entity for the Moderator schema.
type Moderator struct {
	config `json:"-"`
	// ModeratorID holds the value of the "moderator_id" field.
	ModeratorID uuid.UUID `json:"moderator_id,omitempty"`
	// TopicID holds the value of the "topic_id" field.
	TopicID int `json:"topic_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ModeratorQuery when eager-loading is set.
	Edges        ModeratorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ModeratorEdges holds the relations/edges for other nodes in the graph.
type ModeratorEdges struct {
	// Moderator holds the value of the moderator edge.
	Moderator *User `json:"moderator,omitempty"`
	// Topic holds the value of the topic edge.
	Topic *Topic `json:"topic,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ModeratorOrErr returns the Moderator value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ModeratorEdges) ModeratorOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Moderator == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Moderator, nil
	}
	return nil, &NotLoadedError{edge: "moderator"}
}

// TopicOrErr returns the Topic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ModeratorEdges) TopicOrErr() (*Topic, error) {
	if e.loadedTypes[1] {
		if e.Topic == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: topic.Label}
		}
		return e.Topic, nil
	}
	return nil, &NotLoadedError{edge: "topic"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Moderator) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case moderator.FieldTopicID:
			values[i] = new(sql.NullInt64)
		case moderator.FieldModeratorID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Moderator fields.
func (m *Moderator) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case moderator.FieldModeratorID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field moderator_id", values[i])
			} else if value != nil {
				m.ModeratorID = *value
			}
		case moderator.FieldTopicID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field topic_id", values[i])
			} else if value.Valid {
				m.TopicID = int(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Moderator.
// This includes values selected through modifiers, order, etc.
func (m *Moderator) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryModerator queries the "moderator" edge of the Moderator entity.
func (m *Moderator) QueryModerator() *UserQuery {
	return NewModeratorClient(m.config).QueryModerator(m)
}

// QueryTopic queries the "topic" edge of the Moderator entity.
func (m *Moderator) QueryTopic() *TopicQuery {
	return NewModeratorClient(m.config).QueryTopic(m)
}

// Update returns a builder for updating this Moderator.
// Note that you need to call Moderator.Unwrap() before calling this method if this Moderator
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Moderator) Update() *ModeratorUpdateOne {
	return NewModeratorClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Moderator entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Moderator) Unwrap() *Moderator {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Moderator is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Moderator) String() string {
	var builder strings.Builder
	builder.WriteString("Moderator(")
	builder.WriteString("moderator_id=")
	builder.WriteString(fmt.Sprintf("%v", m.ModeratorID))
	builder.WriteString(", ")
	builder.WriteString("topic_id=")
	builder.WriteString(fmt.Sprintf("%v", m.TopicID))
	builder.WriteByte(')')
	return builder.String()
}

// Moderators is a parsable slice of Moderator.
type Moderators []*Moderator
