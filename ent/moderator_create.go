// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/interngowhere/web-backend/ent/moderator"
	"github.com/interngowhere/web-backend/ent/topic"
	"github.com/interngowhere/web-backend/ent/user"
)

// ModeratorCreate is the builder for creating a Moderator entity.
type ModeratorCreate struct {
	config
	mutation *ModeratorMutation
	hooks    []Hook
}

// SetModeratorID sets the "moderator_id" field.
func (mc *ModeratorCreate) SetModeratorID(u uuid.UUID) *ModeratorCreate {
	mc.mutation.SetModeratorID(u)
	return mc
}

// SetTopicID sets the "topic_id" field.
func (mc *ModeratorCreate) SetTopicID(i int) *ModeratorCreate {
	mc.mutation.SetTopicID(i)
	return mc
}

// SetModerator sets the "moderator" edge to the User entity.
func (mc *ModeratorCreate) SetModerator(u *User) *ModeratorCreate {
	return mc.SetModeratorID(u.ID)
}

// SetTopic sets the "topic" edge to the Topic entity.
func (mc *ModeratorCreate) SetTopic(t *Topic) *ModeratorCreate {
	return mc.SetTopicID(t.ID)
}

// Mutation returns the ModeratorMutation object of the builder.
func (mc *ModeratorCreate) Mutation() *ModeratorMutation {
	return mc.mutation
}

// Save creates the Moderator in the database.
func (mc *ModeratorCreate) Save(ctx context.Context) (*Moderator, error) {
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *ModeratorCreate) SaveX(ctx context.Context) *Moderator {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *ModeratorCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *ModeratorCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *ModeratorCreate) check() error {
	if _, ok := mc.mutation.ModeratorID(); !ok {
		return &ValidationError{Name: "moderator_id", err: errors.New(`ent: missing required field "Moderator.moderator_id"`)}
	}
	if _, ok := mc.mutation.TopicID(); !ok {
		return &ValidationError{Name: "topic_id", err: errors.New(`ent: missing required field "Moderator.topic_id"`)}
	}
	if _, ok := mc.mutation.ModeratorID(); !ok {
		return &ValidationError{Name: "moderator", err: errors.New(`ent: missing required edge "Moderator.moderator"`)}
	}
	if _, ok := mc.mutation.TopicID(); !ok {
		return &ValidationError{Name: "topic", err: errors.New(`ent: missing required edge "Moderator.topic"`)}
	}
	return nil
}

func (mc *ModeratorCreate) sqlSave(ctx context.Context) (*Moderator, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (mc *ModeratorCreate) createSpec() (*Moderator, *sqlgraph.CreateSpec) {
	var (
		_node = &Moderator{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(moderator.Table, nil)
	)
	if nodes := mc.mutation.ModeratorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   moderator.ModeratorTable,
			Columns: []string{moderator.ModeratorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ModeratorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := mc.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   moderator.TopicTable,
			Columns: []string{moderator.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TopicID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ModeratorCreateBulk is the builder for creating many Moderator entities in bulk.
type ModeratorCreateBulk struct {
	config
	err      error
	builders []*ModeratorCreate
}

// Save creates the Moderator entities in the database.
func (mcb *ModeratorCreateBulk) Save(ctx context.Context) ([]*Moderator, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Moderator, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ModeratorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *ModeratorCreateBulk) SaveX(ctx context.Context) []*Moderator {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *ModeratorCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *ModeratorCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
