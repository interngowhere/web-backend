// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/interngowhere/web-backend/ent/predicate"
	"github.com/interngowhere/web-backend/ent/threadkudo"
)

// ThreadKudoUpdate is the builder for updating ThreadKudo entities.
type ThreadKudoUpdate struct {
	config
	hooks    []Hook
	mutation *ThreadKudoMutation
}

// Where appends a list predicates to the ThreadKudoUpdate builder.
func (tku *ThreadKudoUpdate) Where(ps ...predicate.ThreadKudo) *ThreadKudoUpdate {
	tku.mutation.Where(ps...)
	return tku
}

// Mutation returns the ThreadKudoMutation object of the builder.
func (tku *ThreadKudoUpdate) Mutation() *ThreadKudoMutation {
	return tku.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tku *ThreadKudoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tku.sqlSave, tku.mutation, tku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tku *ThreadKudoUpdate) SaveX(ctx context.Context) int {
	affected, err := tku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tku *ThreadKudoUpdate) Exec(ctx context.Context) error {
	_, err := tku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tku *ThreadKudoUpdate) ExecX(ctx context.Context) {
	if err := tku.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tku *ThreadKudoUpdate) check() error {
	if _, ok := tku.mutation.UserID(); tku.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ThreadKudo.user"`)
	}
	if _, ok := tku.mutation.ThreadID(); tku.mutation.ThreadCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ThreadKudo.thread"`)
	}
	return nil
}

func (tku *ThreadKudoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tku.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(threadkudo.Table, threadkudo.Columns, sqlgraph.NewFieldSpec(threadkudo.FieldID, field.TypeInt))
	if ps := tku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{threadkudo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tku.mutation.done = true
	return n, nil
}

// ThreadKudoUpdateOne is the builder for updating a single ThreadKudo entity.
type ThreadKudoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ThreadKudoMutation
}

// Mutation returns the ThreadKudoMutation object of the builder.
func (tkuo *ThreadKudoUpdateOne) Mutation() *ThreadKudoMutation {
	return tkuo.mutation
}

// Where appends a list predicates to the ThreadKudoUpdate builder.
func (tkuo *ThreadKudoUpdateOne) Where(ps ...predicate.ThreadKudo) *ThreadKudoUpdateOne {
	tkuo.mutation.Where(ps...)
	return tkuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tkuo *ThreadKudoUpdateOne) Select(field string, fields ...string) *ThreadKudoUpdateOne {
	tkuo.fields = append([]string{field}, fields...)
	return tkuo
}

// Save executes the query and returns the updated ThreadKudo entity.
func (tkuo *ThreadKudoUpdateOne) Save(ctx context.Context) (*ThreadKudo, error) {
	return withHooks(ctx, tkuo.sqlSave, tkuo.mutation, tkuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tkuo *ThreadKudoUpdateOne) SaveX(ctx context.Context) *ThreadKudo {
	node, err := tkuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tkuo *ThreadKudoUpdateOne) Exec(ctx context.Context) error {
	_, err := tkuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tkuo *ThreadKudoUpdateOne) ExecX(ctx context.Context) {
	if err := tkuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tkuo *ThreadKudoUpdateOne) check() error {
	if _, ok := tkuo.mutation.UserID(); tkuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ThreadKudo.user"`)
	}
	if _, ok := tkuo.mutation.ThreadID(); tkuo.mutation.ThreadCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ThreadKudo.thread"`)
	}
	return nil
}

func (tkuo *ThreadKudoUpdateOne) sqlSave(ctx context.Context) (_node *ThreadKudo, err error) {
	if err := tkuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(threadkudo.Table, threadkudo.Columns, sqlgraph.NewFieldSpec(threadkudo.FieldID, field.TypeInt))
	id, ok := tkuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ThreadKudo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tkuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, threadkudo.FieldID)
		for _, f := range fields {
			if !threadkudo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != threadkudo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tkuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &ThreadKudo{config: tkuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tkuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{threadkudo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tkuo.mutation.done = true
	return _node, nil
}
