// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/interngowhere/web-backend/ent/thread"
	"github.com/interngowhere/web-backend/ent/topic"
	"github.com/interngowhere/web-backend/ent/user"
)

// Thread is the model entity for the Thread schema.
type Thread struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// ModifiedAt holds the value of the "modified_at" field.
	ModifiedAt time.Time `json:"modified_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy uuid.UUID `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ThreadQuery when eager-loading is set.
	Edges               ThreadEdges `json:"edges"`
	topic_topic_threads *int
	selectValues        sql.SelectValues
}

// ThreadEdges holds the relations/edges for other nodes in the graph.
type ThreadEdges struct {
	// ThreadComments holds the value of the thread_comments edge.
	ThreadComments []*Comment `json:"thread_comments,omitempty"`
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// Topics holds the value of the topics edge.
	Topics *Topic `json:"topics,omitempty"`
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// KudoedUsers holds the value of the kudoed_users edge.
	KudoedUsers []*User `json:"kudoed_users,omitempty"`
	// ThreadKudoes holds the value of the thread_kudoes edge.
	ThreadKudoes []*ThreadKudo `json:"thread_kudoes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// ThreadCommentsOrErr returns the ThreadComments value or an error if the edge
// was not loaded in eager-loading.
func (e ThreadEdges) ThreadCommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[0] {
		return e.ThreadComments, nil
	}
	return nil, &NotLoadedError{edge: "thread_comments"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e ThreadEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[1] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// TopicsOrErr returns the Topics value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ThreadEdges) TopicsOrErr() (*Topic, error) {
	if e.loadedTypes[2] {
		if e.Topics == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: topic.Label}
		}
		return e.Topics, nil
	}
	return nil, &NotLoadedError{edge: "topics"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ThreadEdges) UsersOrErr() (*User, error) {
	if e.loadedTypes[3] {
		if e.Users == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// KudoedUsersOrErr returns the KudoedUsers value or an error if the edge
// was not loaded in eager-loading.
func (e ThreadEdges) KudoedUsersOrErr() ([]*User, error) {
	if e.loadedTypes[4] {
		return e.KudoedUsers, nil
	}
	return nil, &NotLoadedError{edge: "kudoed_users"}
}

// ThreadKudoesOrErr returns the ThreadKudoes value or an error if the edge
// was not loaded in eager-loading.
func (e ThreadEdges) ThreadKudoesOrErr() ([]*ThreadKudo, error) {
	if e.loadedTypes[5] {
		return e.ThreadKudoes, nil
	}
	return nil, &NotLoadedError{edge: "thread_kudoes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Thread) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case thread.FieldID:
			values[i] = new(sql.NullInt64)
		case thread.FieldTitle, thread.FieldDescription:
			values[i] = new(sql.NullString)
		case thread.FieldModifiedAt, thread.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case thread.FieldCreatedBy:
			values[i] = new(uuid.UUID)
		case thread.ForeignKeys[0]: // topic_topic_threads
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Thread fields.
func (t *Thread) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case thread.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case thread.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				t.Title = value.String
			}
		case thread.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case thread.FieldModifiedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field modified_at", values[i])
			} else if value.Valid {
				t.ModifiedAt = value.Time
			}
		case thread.FieldCreatedBy:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value != nil {
				t.CreatedBy = *value
			}
		case thread.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case thread.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field topic_topic_threads", value)
			} else if value.Valid {
				t.topic_topic_threads = new(int)
				*t.topic_topic_threads = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Thread.
// This includes values selected through modifiers, order, etc.
func (t *Thread) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryThreadComments queries the "thread_comments" edge of the Thread entity.
func (t *Thread) QueryThreadComments() *CommentQuery {
	return NewThreadClient(t.config).QueryThreadComments(t)
}

// QueryTags queries the "tags" edge of the Thread entity.
func (t *Thread) QueryTags() *TagQuery {
	return NewThreadClient(t.config).QueryTags(t)
}

// QueryTopics queries the "topics" edge of the Thread entity.
func (t *Thread) QueryTopics() *TopicQuery {
	return NewThreadClient(t.config).QueryTopics(t)
}

// QueryUsers queries the "users" edge of the Thread entity.
func (t *Thread) QueryUsers() *UserQuery {
	return NewThreadClient(t.config).QueryUsers(t)
}

// QueryKudoedUsers queries the "kudoed_users" edge of the Thread entity.
func (t *Thread) QueryKudoedUsers() *UserQuery {
	return NewThreadClient(t.config).QueryKudoedUsers(t)
}

// QueryThreadKudoes queries the "thread_kudoes" edge of the Thread entity.
func (t *Thread) QueryThreadKudoes() *ThreadKudoQuery {
	return NewThreadClient(t.config).QueryThreadKudoes(t)
}

// Update returns a builder for updating this Thread.
// Note that you need to call Thread.Unwrap() before calling this method if this Thread
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Thread) Update() *ThreadUpdateOne {
	return NewThreadClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Thread entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Thread) Unwrap() *Thread {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Thread is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Thread) String() string {
	var builder strings.Builder
	builder.WriteString("Thread(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("title=")
	builder.WriteString(t.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("modified_at=")
	builder.WriteString(t.ModifiedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", t.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Threads is a parsable slice of Thread.
type Threads []*Thread
