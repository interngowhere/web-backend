// Code generated by ent, DO NOT EDIT.

package moderator

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the moderator type in the database.
	Label = "moderator"
	// FieldModeratorID holds the string denoting the moderator_id field in the database.
	FieldModeratorID = "moderator_id"
	// FieldTopicID holds the string denoting the topic_id field in the database.
	FieldTopicID = "topic_id"
	// EdgeModerator holds the string denoting the moderator edge name in mutations.
	EdgeModerator = "moderator"
	// EdgeTopic holds the string denoting the topic edge name in mutations.
	EdgeTopic = "topic"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "id"
	// TopicFieldID holds the string denoting the ID field of the Topic.
	TopicFieldID = "id"
	// Table holds the table name of the moderator in the database.
	Table = "moderators"
	// ModeratorTable is the table that holds the moderator relation/edge.
	ModeratorTable = "moderators"
	// ModeratorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ModeratorInverseTable = "users"
	// ModeratorColumn is the table column denoting the moderator relation/edge.
	ModeratorColumn = "moderator_id"
	// TopicTable is the table that holds the topic relation/edge.
	TopicTable = "moderators"
	// TopicInverseTable is the table name for the Topic entity.
	// It exists in this package in order to avoid circular dependency with the "topic" package.
	TopicInverseTable = "topics"
	// TopicColumn is the table column denoting the topic relation/edge.
	TopicColumn = "topic_id"
)

// Columns holds all SQL columns for moderator fields.
var Columns = []string{
	FieldModeratorID,
	FieldTopicID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Moderator queries.
type OrderOption func(*sql.Selector)

// ByModeratorID orders the results by the moderator_id field.
func ByModeratorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModeratorID, opts...).ToFunc()
}

// ByTopicID orders the results by the topic_id field.
func ByTopicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopicID, opts...).ToFunc()
}

// ByModeratorField orders the results by moderator field.
func ByModeratorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newModeratorStep(), sql.OrderByField(field, opts...))
	}
}

// ByTopicField orders the results by topic field.
func ByTopicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTopicStep(), sql.OrderByField(field, opts...))
	}
}
func newModeratorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, ModeratorColumn),
		sqlgraph.To(ModeratorInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ModeratorTable, ModeratorColumn),
	)
}
func newTopicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, TopicColumn),
		sqlgraph.To(TopicInverseTable, TopicFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TopicTable, TopicColumn),
	)
}
